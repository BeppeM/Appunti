// modello un sistema client-server 
// processi che condividono una risorsa in mutua esclusione
// P = (acq -> ril -> P | nsc -> P). ncs sono altre operazioni senza risorsa
// voglio però modellare tanti processi uguali P, per esempio 4
// posso usare degli identificatori
// tipo delle classi
// ho copie del processo P
// P = (acq -> ril -> P | nsc -> P). //ncs sono altre operazioni senza risorsa
// ||S = ([1..4]:P). // sintassi per 4 copie di P distinte con identificatoi da 1 a 4
// gli identificatori sono presenti nei grafi
// aggiungo ora un monitor M per mutua esclusione
const N = 4 // per definire costanti simboliche 
P = (acq -> ril -> P | nsc -> P).
// M = ([1].acq -> [1].ril -> M). // per sincronizzazione primo processo
// ma ovviamente lo voglio per tutti i processi
/*M = ([1].acq -> [1].ril -> M |
     [2].acq -> [2].ril -> M |
     [3].acq -> [3].ril -> M |
     [4].acq -> [4].ril -> M ).
*/
// ma voglio una sintassi più semplice
// M = ([1..N].acq -> [1..N].ril -> M). 
// ma si ha un problema: in ogni stato posso eseguire le operazioni di tutti gli identificatori
// (es [3]acq -> [1..N].ril
// associo quindi una variabile locale a M, es. id, 
// imponendo che le due operazioni acq e ril siano sullo stesso id
// per sintassi la second volta basta id senza specificare l'intervallo
M = ([id:1..N].acq -> [id].ril -> M). 
||S = ([1..N]:P || M).

/*
essendo P ben fatto potrei anche fare questo
ma se ci fossero processi che rilasciano prima di acquisire non funzionerebbe
P = (acq -> ril -> P | nsc -> P).
M = (acq -> ril -> M).
||S = ([1..N]:P || [1..N]::M).
*/
